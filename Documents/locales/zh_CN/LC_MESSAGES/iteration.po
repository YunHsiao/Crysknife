# SPDX-FileCopyrightText: 2024 Yun Hsiao Wu <yunhsiaow@gmail.com>
# SPDX-License-Identifier: MIT
msgid ""
msgstr ""
"Project-Id-Version: Crysknife \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-09-05 18:43+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language: zh_CN\n"
"Language-Team: zh_CN <LL@li.org>\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.16.0\n"

#: ../../iteration.rst:6 55d8e27ac9a04246bb28c08c36b2a333
msgid "Multilateral Iteration"
msgstr "多边迭代"

#: ../../iteration.rst:8 b9a7068c8e3e430998de61453768d729
msgid ""
"Here is the recommended setup & workflow for iterating between multiple "
"engines:"
msgstr "以下是推荐的多引擎仓库环境下迭代的配置和工作流："

#: ../../iteration.rst:12 a7390e9babb24656bcbfe3830a4ad83d
msgid ""
"We recommend maintain your plugins in at least two engine versions: the "
"latest release version, and the minimum stock engine you want to support "
"(typically ``4.27``), and of course your in-house engine, if there is "
"one."
msgstr "我们建议在至少维护两个引擎仓库：官方最新的发布版，和需要支持的最早版本（一般如 ``4.27``），以及如果有的话，项目内部引擎仓库。"

#: ../../iteration.rst:16 0d2cb4f9de6248c3b1702841358f63d9
msgid ""
"**Link** all the relevant plugin folders into every engine repositories "
"you want to port to, this way only one set of plugin repositories is "
"maintained, which greatly simplified the workflow."
msgstr "将所有相关扩展 **链接** 到每个需要适配的引擎仓库，这样可以只维护一套扩展代码，大幅简化工作流。"

#: ../../iteration.rst:19 08a605e28a1f445bad0c7685430c8ca3
msgid ""
"First, setup a multi-root workspace as follows could really help: (Using "
"VS Code as an example)"
msgstr "首先搭建一个如下的多文件夹工作区可以帮上不少忙（以 VS Code 为例）："

#: ../../iteration.rst:89 f4cb7aa6f5844d6bb9c1820b3529b6ce
msgid ""
"The setup script is written carefully with this kind of environment in "
"mind, you can just run the same script from different linked directory "
"and it will update the parent repository accordingly."
msgstr "Setup 脚本流程考虑了此类环境，直接在不同的链接路径运行同一个脚本就能更新对应的仓库。"

#: ../../iteration.rst:92 64bc0fc8173d4e499259f824a8a07ff5
msgid ""
"Say we just finished developing for ``Release``, now want to port to "
"``4.27``:"
msgstr "假设我们现在刚刚完成对 ``Release`` 仓库的适配，要移植到 ``4.27``："

#: ../../iteration.rst:101 51017830bd8c4f14bc93c920355d92df
msgid ""
"Then switch to ``4.27`` and start resolving conflicts & do the actual "
"porting. After finished:"
msgstr "然后切到 ``4.27`` 仓库就可以开始处理冲突和实际移植了。工作完成后执行："

#: ../../iteration.rst:112 cc1a779a2f6d46b5aa42a19f0dab6ce5
msgid ""
"This way the patches are updated incrementally, making it much easier and"
" focused to sync back to the ``Release`` repo. It may take some back-and-"
"forth efforts, but do make sure the same set of patches are up-to-date "
"for both engines, which is critical for a smooth deployment experience."
msgstr ""
"这样就只会增量更新 Patch，可以大幅简化同步回 ``Release`` 仓库的过程，"
"帮助开发者专注于关键修改。适配过程可能会需要多次来回才能确保同一套 Patch 在两边可以同步，但这是最终无缝部署体验的关键前提。"

#: ../../iteration.rst:116 e91086b3368f4115ba2704ff8fca4393
msgid ""
"Finally, when the porting is done, the same process still applies "
"**anywhere anytime** changes are made. Say we just fixed a rare corner "
"case found in internal repo, to properly commit the source patch changes:"
msgstr ""
"当移植工作终于完成后，对于 **无论何时何地** 的迭代需求，相同的迭代流程依然适用。假设我们刚刚在内部仓库修复了一个罕见的 "
"Bug，可以按以下流程来准确正式地提交 Patch 相关修改："

#: ../../iteration.rst:135 7d4e6bdd74a4410f99f6804c8a626f28
msgid ""
"It is recommended to use the ``Release`` repo as the base patch source, "
"incrementally update the patches from other stock versions, and never "
"**commit** patches from internal repo (temporary updates like above are "
"fine)."
msgstr "我们推荐全量更新 Patch 基于 ``Release`` 仓库，使用其他官版仓库做增量更新，并不要 **提交** 任何来自内部仓库的 Patch。"

