# SPDX-FileCopyrightText: 2024 Yun Hsiao Wu <yunhsiaow@gmail.com>
# SPDX-License-Identifier: MIT
msgid ""
msgstr ""
"Project-Id-Version: Crysknife \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-09-30 16:30+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language: zh_CN\n"
"Language-Team: zh_CN <LL@li.org>\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.16.0\n"

#: ../../iteration.rst:6
msgid "Multilateral Iteration"
msgstr "多边迭代"

#: ../../iteration.rst:8
msgid "Repositories can be categorized into three types:"
msgstr "引擎仓库大致可以分为三类："

#: ../../iteration.rst:10
msgid "The latest release engine repo (``Release``)"
msgstr "最新的发布版引擎仓库 (``Release``)"

#: ../../iteration.rst:11
msgid "Any stock version engine repo (``Stock``)"
msgstr "任何旧版官方引擎仓库 (``Stock``)"

#: ../../iteration.rst:12
msgid "Any in-house engine repo (``Internal``)"
msgstr "任何项目定制的内部引擎仓库 (``Internal``)"

#: ../../iteration.rst:14
msgid "Three strategies are provided for updating patches accordingly:"
msgstr "相对应地，我们提供三种 Patch 更新策略："

#: ../../iteration.rst:16
msgid ""
"``-G``: Full-scale update for all patches relevant to the current engine "
"version."
msgstr "``-G``: 全量更新所有与当前版本相关的 Patch"

#: ../../iteration.rst:18
msgid ""
"``-Gn``: Only update patches that actually changed, or within the engine "
"version range explicitly specified in :ref:`Decorators`."
msgstr "``-Gn``: 只更新实际有变化，或任何在 :ref:`Decorators` 中显式声明为与当前版本相关的 Patch"

#: ../../iteration.rst:21
msgid "``-Gn 2``: Only update patches that actually changed."
msgstr "``-Gn 2``: 只更新实际有变化的 Patch"

#: ../../iteration.rst:23
msgid ""
"Since we are maintaining the same set of patches across repos, update "
"strategies must be chosen carefully to migrate changes smoothly."
msgstr "因为是跨仓库共用同一套 Patch，认真选择好更新策略，才能平稳顺利地在仓库间迁移修改。"

#: ../../iteration.rst:29
msgid "Workspace Setup"
msgstr "工作区配置"

#: ../../iteration.rst:31
msgid ""
"First, you should **link** all the relevant plugin folders into every "
"engine repositories you want to port to, this way only one set of plugin "
"repositories is maintained, which greatly simplified the workflow. The "
"setup script is written carefully with this kind of environment in mind, "
"you can just run the same script from different linked directory and it "
"will update the parent repository accordingly."
msgstr ""
"首先， **链接** 所有相关扩展文件夹到每个需要适配的引擎仓库，这样可以只维护一套扩展代码，大幅简化工作流。Setup "
"脚本也考虑了此类环境，直接在不同的链接路径运行同一个脚本也能正确更新。"

#: ../../iteration.rst:36
msgid "A multi-root workspace can be setup as follows:"
msgstr "可以按如下配置多目录工作区："

#: ../../iteration.rst:106
msgid "Iteration Examples"
msgstr "迭代案例"

#: ../../iteration.rst:108
msgid ""
"Say we just finished development under ``Release``, now want to port to "
"``Stock``:"
msgstr "假设我们现在刚刚完成对 ``Release`` 仓库的适配，要移植到 ``Stock``："

#: ../../iteration.rst:117
msgid ""
"Then switch to ``Stock`` and start resolving conflicts & do the actual "
"porting. After finished:"
msgstr "然后切到 ``Stock`` 仓库就可以开始处理冲突和实际移植了。工作完成后执行："

#: ../../iteration.rst:128
msgid ""
"This way the patches are updated incrementally, making it much easier and"
" focused to sync back to the ``Release`` repo. It may take some back-and-"
"forth efforts, but do make sure the same set of patches are up-to-date "
"for both engines, which is critical for a smooth deployment experience."
msgstr ""
"这样就只会增量更新 Patch，可以大幅简化同步回 ``Release`` "
"仓库的过程，帮助开发者专注于关键修改。适配过程可能会需要多次来回才能确保同一套 Patch 在两边可以同步，但这是最终无缝部署体验的关键前提。"

#: ../../iteration.rst:132
msgid ""
"Finally, when the porting is done, the same process still applies "
"**anywhere anytime** changes are made. Say we just fixed a rare corner "
"case found in ``Internal`` repo, to properly commit the changes, follow these"
" steps:"
msgstr ""
"当移植工作终于完成后，对于 **无论何时何地** 的迭代需求，相同的迭代流程依然适用。假设我们刚刚在 ``Internal`` 仓库修复了一个罕见的 "
"Bug，可以按以下流程来准确正式地提交 Patch 相关修改："

